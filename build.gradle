/*
 * This file was generated by the Gradle 'init' task.
 *
 */

// This was pulled from an android project
buildscript {
    ext.kotlin_version = '1.3.21'
    ext.framework_name = 'CommonLibrary'
    repositories {
        google()
        jcenter()

    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.4.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}


/*
 * I wonder if I could move this portion out of this root gradle.build
 * and into a gradle.build in ./src ?
 *
 */

// This came from a How To article on Kotlin Multiplatform
// https://kotlinlang.org/docs/tutorials/native/mpp-ios-android.html

apply plugin: 'kotlin-multiplatform'

kotlin {
    targets {
        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") \
                              ? presets.iosArm64 : presets.iosX64

        fromPreset(iOSTarget, 'ios') {
            binaries {
                framework(framework_name)
            }
        }

        fromPreset(presets.jvm, 'android')

    }

    sourceSets {
        commonMain.dependencies {
            api 'org.jetbrains.kotlin:kotlin-stdlib-common'
        }

        commonTest.dependencies {
            implementation kotlin('test-common')
            implementation kotlin('test-annotations-common')
        }

        androidMain.dependencies {
            api 'org.jetbrains.kotlin:kotlin-stdlib'
        }

        androidTest.dependencies {
            implementation kotlin('test')
            implementation kotlin('test-junit')
        }
    }
}

// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}

// This task came from a How To Article on Kotlin Multiplatform
// https://kotlinlang.org/docs/tutorials/native/mpp-ios-android.html

task packForXCode(type: Sync) {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
    final def framework = kotlin.targets.ios.binaries.getFramework(framework_name, mode)

    inputs.property "mode", mode
    dependsOn framework.linkTask

    from { framework.outputFile.parentFile }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}
tasks.build.dependsOn packForXCode